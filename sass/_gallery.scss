.gallery {
  background-color: $color-grey-light-1;
  grid-column: full-start / full-end;

  display: grid;
  grid-template-columns: repeat(8, 1fr);
  // This 5% of the viewport width comes for the experimentation.
  // The reason we are using (5%) of the viewport to size our rows is because we want to
  // ensure that our rows for the gallery are consistently sized when we change the width
  // of the screen (see final project and resize the browser to get a better idea). With
  // this consistency in mind, it makes sense that we want our rows to be sized relative
  // to the the viewport width. Now, if you were doing something like this on your own,
  // you would probably have to experiment with the units to see what works best,
  // but if you start off with an idea of what you want to happen, then it's a bit easier
  // to choose what units to go with.
  // Another way to implement it would be to preset the height of the row that contains
  // this gallery container, and then we could have used the fr unit.
  grid-template-rows: repeat(7, 5vw);
  gap: 1.5rem;

  // Space around the grid container.
  // It looks like as if the gutter was also on the outside of the grid.
  padding: 1.5rem;

  // How to fix the problem of the image overlay (the intrinsic aspect ratio)
  // object-fit: cover
  // It's like setting background-size to cover for the background image.
  // So basically, having an image filling a container.
  // So, what we're going to do here is to add a parent container (<figure>) for each of
  // these elements, then put the element in there and add object-fit to that parent
  // element.
  //
  // In order to object-fit to work, we have to manually set both the width and the height.
  &__item {
    &--1 {
      grid-row: 1 / span 2;
      grid-column: 1 / span 2;
    }

    &--2 {
      grid-row: 1 / span 3;
      grid-column: 3 / span 3;
    }

    &--3 {
      grid-row: 1 / span 2;
      grid-column: 6 / 7;
    }

    &--4 {
      grid-row: 1 / span 2;
      grid-column: 7 / -1;
    }

    &--5 {
      grid-row: 3 / span 3;
      grid-column: 1 / span 2;
    }

    &--6 {
      grid-row: 4 / span 2;
      grid-column: 3 / span 2;
    }

    &--7 {
      grid-row: 4 / 5;
      grid-column: 5 / 6;
    }

    &--8 {
      grid-row: 3 / span 2;
      grid-column: 6 / span 2;
    }

    &--9 {
      grid-row: 3 / span 3;
      grid-column: 8 / -1;
    }

    &--10 {
      grid-row: 6 / span 2;
      grid-column: 1 / 2;
    }

    &--11 {
      grid-row: 6 / span 2;
      grid-column: 2 / span 2;
    }

    &--12 {
      grid-row: 6 / span 2;
      grid-column: 4 / 5;
    }

    &--13 {
      grid-row: 5 / span 3;
      grid-column: 5 / span 3;
    }

    &--14 {
      grid-row: 6 / span 2;
      grid-column: 8 / -1;
    }
  }

  &__img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    // to avoid the small white space after it, because it's treated like an inline
    // element, and so it's like test.
    display: block;
  }
}
